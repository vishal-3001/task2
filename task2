import socket
import requests
import tkinter as tk
from tkinter import messagebox

def probe_open_ports(host, port_range):
    """Probe for open ports"""
    accessible_ports = []
    for port in port_range:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        socket.setdefaulttimeout(1)
        result = sock.connect_ex((host, port))
        if result == 0:
            accessible_ports.append(port)
        sock.close()
    return accessible_ports

def inspect_http_headers(url):
    """Inspect HTTP headers"""
    headers = []
    try:
        response = requests.get(url, timeout=5)
        headers = dict(response.headers)
    except requests.RequestException as e:
        messagebox.showerror("Error", f"Error fetching HTTP headers: {e}")
    return headers

def detect_outdated_server_software(headers):
    """Detect outdated server software"""
    outdated = []
    server = headers.get('Server', '')
    if 'Apache' in server:
        version = server.split(' ')[1] if len(server.split(' ')) > 1 else ''
        if version and version < '2.4.51':
            outdated.append(f"Apache version {version} is outdated.")
    elif 'nginx' in server:
        version = server.split('/')[1] if len(server.split('/')) > 1 else ''
        if version and version < '1.21.4':
            outdated.append(f"nginx version {version} is outdated.")
    return outdated

def identify_security_vulnerabilities(headers):
    """Identify security vulnerabilities"""
    issues = []
    if 'X-Frame-Options' not in headers:
        issues.append("X-Frame-Options header is missing.")
    if 'X-Content-Type-Options' not in headers:
        issues.append("X-Content-Type-Options header is missing.")
    if 'Content-Security-Policy' not in headers:
        issues.append("Content-Security-Policy header is missing.")
    if 'Strict-Transport-Security' not in headers:
        issues.append("Strict-Transport-Security header is missing.")
    return issues

def security_audit(host):
    """Perform security audit"""
    result_text.delete(1.0, tk.END)
    result_text.insert(tk.END, f"Auditing {host} for security vulnerabilities...\n")

    # Probing for open ports
    port_range = [80, 443, 22, 21, 25, 3305]
    accessible_ports = probe_open_ports(host, port_range)
    result_text.insert(tk.END, f"*Accessible Ports:* {accessible_ports}\n")

    # Inspecting HTTP headers and server software
    url = f"http://{host}"
    headers = inspect_http_headers(url)
    if headers:
        result_text.insert(tk.END, f"*HTTP Headers:* {headers}\n")
        outdated_server_software = detect_outdated_server_software(headers)
        if outdated_server_software:
            result_text.insert(tk.END, "*Outdated Server Software Detected:\n")
            for issue in outdated_server_software:
                result_text.insert(tk.END, f"- {issue}\n")
            result_text.insert(tk.END, "\n")
        else:
            result_text.insert(tk.END, "*No Outdated Server Software Detected.*\n")

        security_issues = identify_security_vulnerabilities(headers)
        if security_issues:
            result_text.insert(tk.END, "*Security Vulnerabilities Detected:\n")
            for issue in security_issues:
                result_text.insert(tk.END, f"- {issue}\n")
            result_text.insert(tk.END, "\n")
        else:
            result_text.insert(tk.END, "*No Security Vulnerabilities Detected.*\n")
    else:
        result_text.insert(tk.END, "*Could not retrieve HTTP headers.*\n")

def start_audit():
    host = host_entry.get()
    security_audit(host)

root = tk.Tk()
root.title("Security Auditor")

host_label = tk.Label(root, text="Enter the host (IP address or domain):")
host_label.pack()

host_entry = tk.Entry(root, width=50)
host_entry.pack()

start_button = tk.Button(root, text="Start Audit", command=start_audit)
start_button.pack()

result_text = tk.Text(root, width=80, height=20)
result_text.pack()

root.mainloop()

